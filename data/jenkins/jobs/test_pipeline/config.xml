<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1540.v295eccc9778f">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2265.v140e610fe9d5"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2265.v140e610fe9d5">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@4183.v94b_6fd39da_c1">
    <script>// Uses Declarative syntax to run commands inside a container.
pipeline {
    agent {
        kubernetes {
            // Rather than inline YAML, in a multibranch Pipeline you could use: yamlFile &apos;jenkins-pod.yaml&apos;
            // Or, to avoid YAML:
            // containerTemplate {
            //     name &apos;shell&apos;
            //     image &apos;ubuntu&apos;
            //     command &apos;sleep&apos;
            //     args &apos;infinity&apos;
            // }
            yaml &apos;&apos;&apos;
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: shell
    image: ubuntu
    command:
    - sleep
    args:
    - infinity
    securityContext:
      # ubuntu runs as root by default, it is recommended or even mandatory in some environments (such as pod security admission &quot;restricted&quot;) to run as a non-root user.
      runAsUser: 1000
&apos;&apos;&apos;
            // Can also wrap individual steps:
            // container(&apos;shell&apos;) {
            //     sh &apos;hostname&apos;
            // }
            retries 2
        }
    }
    stages {
        stage(&apos;Main&apos;) {
            steps {
                container(&apos;shell&apos;) {
                        sh &apos;hostname&apos;
                }
                
                container(&apos;jnlp&apos;) {
                       sh &apos;hostname&apos;
                }
            }
        }
    }
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>